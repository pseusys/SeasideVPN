[project]
name = "SeasideVPN-Algae"
version = "0.0.3"
description = "A testing SeasideVPN client and installation script for Linux"
readme = "README.md"
requires-python = ">=3.11,<3.13"


license-files = [
    "../../LICENSE"
]

authors = [
    { name = "Alexander Sergeev", email = "alexander.sergeev@onmail.com>" }
]

keywords = [
    "open-source",
    "udp",
    "distributed",
    "vpn",
    "client-server",
    "pptp",
    "p2p-network"
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet",
    "Topic :: Security",
    "Topic :: System :: Networking"
]

dependencies = [
    "grpcio-tools~=1.62.0",
    "betterproto[compiler]~=2.0.0b6"
]




[project.urls]
repository = "https://github.com/pseusys/SeasideVPN"


[project.optional-dependencies]
client = [
    "colorama~=0.4.6",
    "pyroute2~=0.7.9",
    "python-iptables~=1.2.0",
    "betterproto~=2.0.0b6",
    "pymonocypher~=4.0.2.5"
]

devel = [
    "pytest~=8.3.2",
    "pythonping~=1.1.4",
    "dnspython~=2.7.0",
    "pytest-asyncio~=0.26.0",
    "pytest-timeout~=2.3.1",
    "pytest-dependency~=0.6.0"
]

codestyle = [
    "mypy~=1.3.0",
    "flake8~=7.1.0",
    "black~=24.8.0",
    "isort~=5.11.0",
    "types-PyYAML~=6.0.2"
]

bundle = [
    "tomli~=2.2.1",
    "zipapps~=2024.8.7"
]

setup = [
    "colorama~=0.4.6",
    "cryptography~=44.0.0",
    "semver~=3.0.2"
]

test = [
    "colorama~=0.4.6",
    "python-on-whales~=0.76.1",
    "PyYAML~=6.0.2"
]

protocol = [
    "jupyter~=1.1.1",
    "ipywidgets~=8.1.6",
    "matplotlib~=3.10.1",
    "scapy~=2.6.1",
    "nbstripout~=0.8.1"
]



# Poetry config:

[tool.poetry]
package-mode = false
requires-poetry = ">=2.0"

packages = [
    { include = "sources" },
    { include = "setup" }
]


[tool.poetry.requires-plugins]
poethepoet = "^0.34.0"



# Poe-the-poet config:

[tool.poe]
default_task_type = "script"


[tool.poe.tasks]
client = { script = "sources.main:main()", help = "Import and execute main function of algae simple client, pass console arguments to it" }
lint = { script = "scripts.codestyle:lint()", help = "Lint all python code: run 'flake8', 'black' and 'mypy'" }
format = { script = "scripts.codestyle:format()", help = "Format all python code: change code formatting where possible (using 'black')" }
generate = { script = "scripts.process:generate()", help = "Generate protobuf source files, previous generation results will be removed; libraries 'grpcio-tools' and 'betterproto' is used for generation" }
bundle = { script = "scripts.process:bundle()", help = "Bundle caerulean installation script; library 'zipapps' is used for bundling" }
clean = { script = "scripts.process:clean()", help = "Delete all algae generated source files, build files and executables, also remove all related Docker containers, images and networks" }
test-unit = { script = "scripts.test:test_set('unit')", help = "Run unit tests: all the algae client functions in particular" }
test-integration = { script = "scripts.test:test_set('integration')", help = "Run integration tests: sequence of VPN connection, disconnection and other control requests" }
test-local = { script = "scripts.test:test_set('local')", help = "Run local smoke tests: connection is made to local TCP server in a Docker container; network packet random drop (25%) is enabled ('gaiaadm/pumba' library is used)" }
test-remote = { script = "scripts.test:test_set('remote')", help = "Run remote smoke tests: connection is made to several remote servers; several different transport and application layer protocols are used" }
test-smoke = { sequence = ["test-local", "test-remote"], help = "Run smoke tests: run both 'local' and 'remote' smoke tests (specified above)" }
test-all = { sequence = ["test-unit", "test-integration", "test-local", "test-remote"], help = "Run tests: run all tests (specified above)" }
setup = { cmd = "python -m setup", help = "Run whirlpool setup package, pass console arguments to it" }


[tool.poe.poetry_hooks]
post_install = "generate"
