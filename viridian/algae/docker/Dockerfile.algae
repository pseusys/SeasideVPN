# syntax=docker/dockerfile:1

FROM ubuntu:22.04 AS builder

WORKDIR /seaside/algae

ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive

# Set protoc version environment variables.
ENV PROTOC_VERSION=24.4
ENV PROTOC_ZIP=protoc-$PROTOC_VERSION-linux-x86_64.zip

# Download and install latest protoc compiler and python dependencies.
RUN apt-get update && apt-get install -y --no-install-recommends python3-pip wget unzip ca-certificates && rm -rf /var/lib/apt/lists/*
RUN wget -qO $PROTOC_ZIP https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP && unzip -o $PROTOC_ZIP -d /usr/local bin/protoc && unzip -o $PROTOC_ZIP -d /usr/local 'include/*' && rm -f $PROTOC_ZIP
RUN pip install --upgrade --no-cache-dir pip poetry && poetry self add poetry-plugin-export

# Export dependencies from poetry to a `requirements.txt` file.
COPY viridian/algae/pyproject.toml ./
RUN poetry export -f requirements.txt --with client,devel --without-hashes --output requirements.txt
RUN poetry install --without client,devel

# Copy protobuf files and generate python code.
COPY vessels ./vessels
RUN poetry run python -m grpc_tools.protoc -I=vessels --python_betterproto_out=. vessels/*.proto


FROM ubuntu:22.04 AS default-sleeping

WORKDIR /seaside/algae

ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive

# Install testing dependencies.
RUN apt-get update && apt-get install -y --no-install-recommends build-essential iptables iproute2 iputils-ping dnsutils python3-pip && rm -rf /var/lib/apt/lists/*
COPY --from=builder /seaside/algae/requirements.txt ./
RUN pip install --upgrade --no-cache-dir pip -r requirements.txt

# Copy algae and test sources, also copy generated protobuf files.
COPY --from=builder /seaside/algae/ ./sources/
COPY viridian/algae/sources/*.py ./sources/
COPY viridian/algae/tests/*.py ./tests/
RUN touch __init__.py sources/__init__.py tests/__init__.py

ENV SEASIDE_PAYLOAD_OWNER=
ENV SEASIDE_ADDRESS=
ENV SEASIDE_CTRLPORT=

ENV SEASIDE_TUNNEL_NAME=seatun
ENV SEASIDE_MIN_HC_TIME=1
ENV SEASIDE_MAX_HC_TIME=5
ENV SEASIDE_CONNECTION_TIMEOUT=3.0

# Just sleep - run nothing.
ENTRYPOINT sleep infinity


FROM default-sleeping AS default

# Run viridian algae in the background.
ENTRYPOINT python3 -m sources.main $SEASIDE_PAYLOAD_OWNER -a $SEASIDE_ADDRESS -c $SEASIDE_CTRLPORT

HEALTHCHECK --interval=1m --timeout=1s --retries=3 --start-period=10s --start-interval=3s CMD ls /sys/class/net | grep $SEASIDE_TUNNEL_NAME


FROM default-sleeping AS smoke-sleeping

ARG NETWORK_GATEWAY
ENV ARG_NETWORK_GATEWAY=$NETWORK_GATEWAY

# Setup default route IP and sleep.
ENTRYPOINT ip route replace default via $ARG_NETWORK_GATEWAY && sleep infinity


FROM smoke-sleeping AS smoke

# Setup default route IP and run viridian algae in the background.
ENTRYPOINT ip route replace default via $ARG_NETWORK_GATEWAY \
    && python3 -m sources.main $SEASIDE_PAYLOAD_OWNER -a $SEASIDE_ADDRESS -c $SEASIDE_CTRLPORT

HEALTHCHECK --interval=1m --timeout=1s --retries=3 --start-period=10s --start-interval=3s CMD ls /sys/class/net | grep $SEASIDE_TUNNEL_NAME



FROM smoke AS commanded

ARG COMMAND
ENV COMMAND=$COMMAND

# Setup default route IP and run viridian algae in the background.
ENTRYPOINT ip route replace default via $ARG_NETWORK_GATEWAY \
    && python3 -m sources.main $SEASIDE_PAYLOAD_OWNER -a $SEASIDE_ADDRESS -c $SEASIDE_CTRLPORT -e "$COMMAND"
