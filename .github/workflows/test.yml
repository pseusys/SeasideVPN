name: TEST
# TODO: fix 'install poethepoet[poetry_plugin]' once windows issue is resolved: https://github.com/python-poetry/poetry/issues/10028

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  RUNNING_IN_CI: 1

jobs:
  viridian-algae-test-full:
    name: Test Viridian Algae Full
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup Python 3.11 🐍
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies 🔮
        working-directory: viridian/algae
        run: |
          pip3 install poetry
          poetry install --extras "setup test"

      - name: Test Viridian Algae (unit) 🧪
        working-directory: viridian/algae
        run: poetry poe test-unit

      - name: Test Viridian Algae (integration) 📇
        working-directory: viridian/algae
        run: poetry poe test-integration

      - name: Test Viridian Algae (smoke) 😶‍🌫️
        working-directory: viridian/algae
        run: poetry poe test-smoke

  viridian-algae-test-quick:
    name: Test Viridian Algae Quick
    runs-on: ubuntu-latest
    env:
      TEST_TIMEOUT: 15.0
      LOCAL_ADDRESS: 10.82.0.1
      ECHO_ADDRESS: 10.42.0.42
      TEST_COMMAND: poetry run pytest --log-cli-level=INFO tests/test_local.py

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Install NodeJS 🪢
        uses: actions/setup-node@v4.1.0
        with:
          node-version: 22

      - name: Install Node Dependencies 🔮
        working-directory: .github/scripts
        run: npm install

      - name: Setup Python 3.11 🐍
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies 🔮
        working-directory: viridian/algae
        run: |
          pip3 install poetry poethepoet[poetry_plugin]
          poetry install --extras "client devel"

      - name: Start Background Server
        id: start-background-server
        working-directory: .github/scripts
        run: sudo npm run configure-viridian-test

      - name: Load .ENV File
        uses: aarcangeli/load-dotenv@v1
        with:
          path: viridian/algae/docker
          filenames: test.conf.env

      - name: Get Connection Link
        working-directory: viridian/algae
        env:
          SEASIDE_ADDRESS: 10.87.82.87
          SEASIDE_ROOT_CERTIFICATE_AUTHORITY: ${{ github.workspace }}/viridian/algae/certificates/viridian/rootCA.crt
          SEASIDE_LOG_LEVEL: ERROR
        run: |
          LINK=$(poetry poe -q fixture -a "${{ env.SEASIDE_ADDRESS }}" -p "${{ env.SEASIDE_API_PORT }}" -k "${{ env.SEASIDE_API_KEY_ADMIN }}" supply-viridian -s)
          echo "WHIRLPOOL_LINK=$LINK" >> $GITHUB_ENV

      - name: Test Echo Server Access (no VPN)
        working-directory: viridian/algae
        run: eval "${{ env.TEST_COMMAND }}" && exit 1 || true

      - name: Test Viridian Algae PORT (standalone) 🧪
        id: test-viridian-algae-port
        working-directory: viridian/algae
        run: sudo -E env "PATH=$PATH" poetry poe client -s port -l "${{ env.WHIRLPOOL_LINK }}" -e "${{ env.TEST_COMMAND }}"

      - name: Test Viridian Algae TYPHOON (standalone) 🧪
        id: test-viridian-algae-typhoon
        working-directory: viridian/algae
        run: sudo -E env "PATH=$PATH" poetry poe client -s typhoon -l "${{ env.WHIRLPOOL_LINK }}" -e "${{ env.TEST_COMMAND }}"

      - name: Print Whirlpool Logs
        if: failure() && (steps.test-viridian-algae-port.outcome == 'failure' || steps.test-viridian-algae-typhoon.outcome == 'failure')
        working-directory: viridian/algae
        run: docker compose -f docker/compose.standalone.yml logs whirlpool

      - name: Terminate Background Server
        if: always() && steps.start-background-server.outcome == 'success'
        working-directory: .github/scripts
        run: sudo npm run configure-viridian-test -- -r

  viridian-reef-test:
    name: Test Viridian Reef
    runs-on: ${{ format('{0}-latest', matrix.os) }}
    env:
      SUDO: ${{ matrix.os == 'ubuntu' && 'sudo -E env "PATH=$PATH"' || '' }}
      TEST_TIMEOUT: 15.0
      LOCAL_ADDRESS: 10.82.0.1
      SEASIDE_ADDRESS: 10.87.82.87
      ECHO_ADDRESS: 10.42.0.42
      RUNNER_COMMAND: cargo run --features cli-exec --bin cli --manifest-path ../reef/Cargo.toml
      TEST_COMMAND: poetry run pytest --log-cli-level=INFO tests/test_local.py
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows]

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup WSL
        if: runner.os == 'Windows'
        uses: Vampire/setup-wsl@v5
        with:
          distribution: Ubuntu-24.04
          set-as-default: true
          additional-packages:
            tcpdump

      - name: Post-Configure WSL
        if: runner.os == 'Windows'
        run: |
          $WSL_IP = (wsl -u root hostname -I).Split()[0].Trim()
          $COMPOSE_PATH = (wsl wslpath -a .\\viridian\\algae\\docker\\compose.standalone.yml).Trim()
          wsl -u root sysctl -w net.ipv4.ip_forward=1
          wsl -u root sh -c "curl -fsSL https://get.docker.com | sh"
          wsl -u root docker compose -f $COMPOSE_PATH up --build --detach
          wsl -u root iptables -t filter -A FORWARD -i eth0 -d 10.42.0.0/24 -j DROP
          wsl -u root iptables -t filter -A FORWARD -i eth0 -d 10.87.82.0/24 -j ACCEPT
          wsl -u root iptables -t nat -A POSTROUTING -d 10.87.82.0/24 -j MASQUERADE
          route add 10.42.0.0 mask 255.255.255.0 $WSL_IP
          route add 10.87.82.0 mask 255.255.255.0 $WSL_IP
          New-NetFirewallRule -DisplayName "Allow All to WSL2" -Direction Inbound -Action Allow -LocalAddress $WSL_IP -Protocol Any -Profile Any -Enabled True
          wsl -u root sh -c "tcpdump -o eth0 > ./ip-log-eth0.txt 2>&1 &"
          wsl -u root sh -c "tcpdump -o any > ./ip-log-any.txt 2>&1 &"
          wsl -u root sh -c "tcpdump -o lo > ./ip-log-lo.txt 2>&1 &"
          wsl -u root ls .
          wsl -u root sleep 30

      - name: TEST STEP
        if: runner.os == 'Windows'
        run: |
          $WSL_IP = (wsl -u root hostname -I).Split()[0].Trim()
          $COMPOSE_PATH = (wsl wslpath -a .\\viridian\\algae\\docker\\compose.standalone.yml).Trim()
          $WSL_IP
          wsl -u root docker compose -f $COMPOSE_PATH ps
          ping -n 5 $WSL_IP
          Test-NetConnection 10.87.82.87 -Port 8587
          Test-NetConnection 10.42.0.42 -Port 5000
          Find-NetRoute -RemoteIPAddress 10.87.82.87
          Find-NetRoute -RemoteIPAddress 10.42.0.42
          wsl -u root iptables -t nat -L -v -n
          wsl -u root iptables -t filter -L -v -n
          wsl -u root ip addr show
          wsl -u root ip route show
          wsl -u root ls .
          wsl echo "eth0 dump:"
          wsl -u root cat ./ip-log-eth0.txt
          wsl echo "any dump:"
          wsl -u root cat ./ip-log-any.txt
          wsl echo "lo dump:"
          wsl -u root cat ./ip-log-lo.txt
          route print
          route print 10.87.82.87
          route print 10.87.82.0
          route print 10.87.82.*
          Get-NetFirewallRule

      - name: Install NodeJS 🪢
        uses: actions/setup-node@v4.1.0
        with:
          node-version: 22

      - name: Install Node Dependencies 🔮
        working-directory: .github/scripts
        run: npm install

      - name: Setup Python 3.11 🐍
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Rust 🦀
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.os == 'ubuntu' && 'x86_64-unknown-linux-gnu' || 'x86_64-pc-windows-msvc' }}
          cache-workspaces: viridian/reef
          override: true

      - name: Install Dependencies 🔮
        working-directory: viridian/algae
        run: |
          pip3 install poetry poethepoet[poetry_plugin]
          poetry install --extras "devel"

      - name: Test Viridian Reef (unit) 🧪
        working-directory: viridian/reef
        run: ${{ env.SUDO }} cargo test --package SeasideVPN-Reef --lib -- --nocapture --show-output

      - name: Start Background Server
        id: start-background-server
        working-directory: .github/scripts
        run: ${{ env.SUDO }} npm run configure-viridian-test

      - name: Load .ENV File
        uses: aarcangeli/load-dotenv@v1
        with:
          path: viridian/algae/docker
          filenames: test.conf.env

      - name: Get Connection Link
        working-directory: viridian/algae
        env:
          SEASIDE_ROOT_CERTIFICATE_AUTHORITY: ${{ github.workspace }}/viridian/algae/certificates/viridian/rootCA.crt
          SEASIDE_LOG_LEVEL: ERROR
        run: |
          LINK=$(poetry poe -q fixture -a "${{ env.SEASIDE_ADDRESS }}" -p "${{ env.SEASIDE_API_PORT }}" -k "${{ env.SEASIDE_API_KEY_ADMIN }}" supply-viridian -s)
          echo "WHIRLPOOL_LINK=$LINK" >> $GITHUB_ENV

      - name: Test Echo Server Access (no VPN)
        working-directory: viridian/algae
        run: eval "${{ env.TEST_COMMAND }}" && exit 1 || true

      - name: Test Viridian Reef PORT (integration) 🧪
        id: test-viridian-reef-port
        working-directory: viridian/algae
        env:
          SEASIDE_LOG_LEVEL: reeflib=DEBUG,INFO
        run: ${{ env.SUDO }} ${{ env.RUNNER_COMMAND }} -- -s port -l "${{ env.WHIRLPOOL_LINK }}" -e "${{ env.TEST_COMMAND }}"

      - name: Test Viridian Reef TYPHOON (integration) 🧪
        id: test-viridian-reef-typhoon
        working-directory: viridian/algae
        env:
          SEASIDE_LOG_LEVEL: reeflib=DEBUG,INFO
        run: ${{ env.SUDO }} ${{ env.RUNNER_COMMAND }} -- -s typhoon -l "${{ env.WHIRLPOOL_LINK }}" -e "${{ env.TEST_COMMAND }}"

      - name: Print Whirlpool Logs
        if: failure() && (steps.test-viridian-reef-port.outcome == 'failure' || steps.test-viridian-reef-typhoon.outcome == 'failure')
        working-directory: viridian/algae
        run: docker compose -f docker/compose.standalone.yml logs whirlpool

      - name: Terminate Background Server
        if: always() && steps.start-background-server.outcome == 'success'
        working-directory: .github/scripts
        run: ${{ env.SUDO }} npm run configure-viridian-test -- -r

  caerulean-whirlpool-test:
    name: Test Caerulean Whirlpool
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Test Caerulean Whirlpool 🧪
        working-directory: caerulean/whirlpool
        run: make -s test

  caerulean-installer-script:
    name: Test Caerulean Installer Script
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dist: [compile, docker, binary]
        caerulean: [whirlpool]

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup Python 3.11 🐍
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies 🔮
        working-directory: viridian/algae
        run: |
          pip3 install poetry
          poetry install --extras "bundle setup"

      - name: Compile Installer Script 🏗️
        working-directory: viridian/algae
        run: poetry poe bundle

      - name: Run Installer Script 📥
        working-directory: viridian/algae
        env:
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: sudo -E python3 install.pyz -g -a no ${{ matrix.caerulean }} -r ${{ matrix.dist }} -s ${{ env.BRANCH_NAME }}
